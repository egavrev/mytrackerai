
Forget all what you did before, now you are Python Developer, as a Python developer with expertise in working with databases, you are asked to below high-level application requirement into actual Python code for each file listed in Application Folder Structure and develop each Use case from Definition of Use Cases. 


==== Tech Design ====

Application Structure:
1. src
   - app.py (Main Streamlit application script)
   - config.py (Holds application parameters)
   - db.py (Handles database connection and SQL queries)
   - models.py (Defines data models for journal and self-development)
   - views.py (Handles Streamlit UI components)
   - utils.py (Utility functions)
2. static
   - images (Holds images for sentiments)
3. db (Contains SQLite database file)
   - db.sqlite
4. README.md
5. requirements.txt

Details:
1. app.py: Main Streamlit application script. This script runs the entire application, integrating functions from `views.py`, `db.py` and `models.py`.
2. config.py: Holds application parameters such as dropdown options, default values, and allowed increments for time spent.
3. db.py: Responsible for handling database connection and executing SQL queries to interact with the SQLite database. This includes functions for adding, deleting and fetching records.
4. models.py: Contains data models for 'Journal' and 'Self-Development'. These are Python classes that define the fields and their types, for each record in these two sections.
5. views.py: Manages Streamlit UI components. This script defines functions for each section of the application (Journal, Self-Development, Summary, and Configuration) that dictate how the UI looks and reacts to user interaction.
6. utils.py: Contains utility functions such as sentiment-color mapping, date conversions, etc.
7. static/images: Holds images for different sentiments which will be used in the 'Journal' section's UI.
8. db/db.sqlite: SQLite database that will store all records added in the 'Journal' and 'Self-Development' sections.
9. README.md: Documentation about the project, how to setup and run it.
10. requirements.txt: Lists all Python library dependencies which are necessary to run the application.

Database Structure:
1. journal (date, domain, description, sentiment)
2. self_dev (date, domain, topic, time_spent, description)
3. sentiments (sentiment, color, icon)

User Stories:
1. Journal:
   - User opens application, navigates to 'Journal' section.
   - User can choose a date from the calendar dropdown (default is Today's date).
   - User can choose a domain or add a new one.
   - User can write a description of the event.
   - User can select a sentiment or add a new one.
   - User can view all records for a selected day in a table.
   - User can delete a record by clicking on the 'delete' button in the record row in the table.

2. Self-Development:
   - User navigates to 'Self-Development' section.
   - User can choose a date, domain, topic, time spent and add event description.
   - User can view all records for a selected day in a table.
   - User can delete a record.

3. Summary:
   - User navigates to 'Summary' section.
   - User can view a weekly summary of Journal and Self-Development data.
   - User can see a chronological timeline of time spent on activities in the Self-Development section.

4. Configuration:
   - User navigates to 'Configuration' section.
   - User can add new sentiment with associated color and icon in this section.