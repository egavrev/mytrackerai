
Forget all what you did before, now you are Python Developer, as a Python developer with expertise in working with databases, you are asked to below high-level application requirement into actual Python code for each file listed in Application Folder Structure and develop each Use case from Definition of Use Cases. 


#### Application Folder Structure:

    /app
        - main.py
        - models.py
        - journal.py
        - self_development.py
        - summary.py
        - configuration.py
        - utils.py

#### Individual .py File Content

1. **main.py**: Entry point of the application. Initializes the Streamlit app and renders the four main screens based on user selection.

2. **models.py**: Contains the SQLAlchemy ORM models for the SQLite database. Defines two tables: Journal and SelfDevelopment.

3. **journal.py**: Contains functions for rendering the Journal screen, adding new journal entries, deleting existing entries, and displaying entries based on selected date.

4. **self_development.py**: Contains functions for rendering the Self-Development screen, adding new self-development entries, deleting existing entries, and displaying entries based on selected date.

5. **summary.py**: Contains functions for rendering the Summary screen. Fetches data from the Journal and SelfDevelopment tables and presents it in a user-friendly manner.

6. **configuration.py**: Contains functions for rendering the Configuration screen and updating the application's parameters.

7. **utils.py**: Contains utility functions that are used across the application, such as fetching data from the database, updating the database, handling date conversions, and validating user inputs.

#### Database Structure in SQL

The SQLite database will have two tables: Journal and SelfDevelopment.

1. **Journal**
    - id (INTEGER PRIMARY KEY)
    - date (DATE)
    - domain (VARCHAR)
    - sentiment (VARCHAR)
    - description (TEXT)
    - created_at (DATETIME)
    - updated_at (DATETIME)

2. **SelfDevelopment**
    - id (INTEGER PRIMARY KEY)
    - date (DATE)
    - domain (VARCHAR)
    - topic (VARCHAR)
    - duration (INTEGER)
    - details (TEXT)
    - created_at (DATETIME)
    - updated_at (DATETIME)

#### Definition of Use Cases

1. **Viewing Journal/Self-Development Entries for a Specific Date**: User can select a date from the dropdown. The app fetches and displays the journal/self-development entries for the selected date from the Journal/SelfDevelopment table. By default, entries for the current date are shown.

2. **Adding a Journal Entry**: User can add a new journal entry by selecting a date, domain, sentiment, and entering a description. The app validates the input and adds the new entry to the Journal table.

3. **Deleting a Journal Entry**: User can delete an existing journal entry. The app removes the corresponding record from the Journal table.

4. **Adding a Self-Development Entry**: User can add a new self-development entry by selecting a date, domain, topic, duration, and entering details. The app validates the input and adds the new entry to the SelfDevelopment table.

5. **Deleting a Self-Development Entry**: User can delete an existing self-development entry. The app removes the corresponding record from the SelfDevelopment table.

6. **Viewing the Summary**: User can view a summary of their journal and self-development entries. The app fetches the relevant data from the Journal and SelfDevelopment tables and presents it in a user-friendly manner.

7. **Updating the Configuration**: User can update the application's parameters, such as adding new sentiments and their associated icons and colors. The app validates the input and updates the corresponding configuration.